// <auto-generated />
using System;
using HomeHavenAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeHavenAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240503121513_Register")]
    partial class Register
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeHavenAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Villa"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Lägenhet"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "RadHus"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "FritidsBoende"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Tomt"
                        });
                });

            modelBuilder.Entity("HomeHavenAPI.Models.Realtor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RealtorFirmId")
                        .HasColumnType("int");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RealtorFirmId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HomeHavenAPI.Models.RealtorFirm", b =>
                {
                    b.Property<int>("RealtorFirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealtorFirmId"));

                    b.Property<string>("Descrpition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealtorFirmId");

                    b.ToTable("Firms");

                    b.HasData(
                        new
                        {
                            RealtorFirmId = 1,
                            Descrpition = "En mäklarfirm med fokus på att göra drömmar till verklighet för kunder genom att matcha dem med sitt perfekta hem.",
                            FirmName = "Dream Home Realty",
                            LogoURL = "URL"
                        },
                        new
                        {
                            RealtorFirmId = 2,
                            Descrpition = "Specialiserade på lyxiga och exklusiva fastigheter, erbjuder Elite Properties en förstklassig service för kunder som söker det bästa av det bästa.",
                            FirmName = "Elite Properties",
                            LogoURL = "URL"
                        },
                        new
                        {
                            RealtorFirmId = 3,
                            Descrpition = "Med starka förbindelser och expertis inom fastighetsmarknaden, strävar Prime Real Estate Solutions efter att hjälpa kunder att hitta de mest lönsamma fastighetsaffärerna.",
                            FirmName = "Prime Real Estate Solutions",
                            LogoURL = "URL"
                        },
                        new
                        {
                            RealtorFirmId = 4,
                            Descrpition = "Fokuserar på att skapa en \"näste\" åt sina kunder där de kan känna sig hemma och bekväma i den stadsmiljö de älskar.",
                            FirmName = "Urban Nest Realty",
                            LogoURL = "URL"
                        },
                        new
                        {
                            RealtorFirmId = 5,
                            Descrpition = "Tar sina kunder till nya horisonter genom att guida dem genom köp- och säljprocessen med en personlig och professionell approach.",
                            FirmName = "Horizon Homes Real Estate",
                            LogoURL = "URL"
                        });
                });

            modelBuilder.Entity("HomeHavenAPI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Township")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            County = "Stockholm",
                            Township = "Sollentuna"
                        },
                        new
                        {
                            RegionId = 2,
                            County = "Uppsala",
                            Township = "Östhammar"
                        },
                        new
                        {
                            RegionId = 3,
                            County = "Jönköpings",
                            Township = "Gislaved"
                        },
                        new
                        {
                            RegionId = 4,
                            County = "Kalmar",
                            Township = "Torsås"
                        },
                        new
                        {
                            RegionId = 5,
                            County = "Blekinge",
                            Township = "Karlskrona"
                        },
                        new
                        {
                            RegionId = 6,
                            County = "Västerbotten",
                            Township = "Umeå"
                        },
                        new
                        {
                            RegionId = 7,
                            County = "Stockholm",
                            Township = "Ekerö"
                        },
                        new
                        {
                            RegionId = 8,
                            County = "Jämtland",
                            Township = "Östersund"
                        },
                        new
                        {
                            RegionId = 9,
                            County = "Skåne",
                            Township = "Malmö"
                        },
                        new
                        {
                            RegionId = 10,
                            County = "Skåne",
                            Township = "Hörby"
                        },
                        new
                        {
                            RegionId = 12,
                            County = "Stockholm",
                            Township = "Järfälla"
                        },
                        new
                        {
                            RegionId = 14,
                            County = "Stockholm",
                            Township = "Botkyrka"
                        },
                        new
                        {
                            RegionId = 15,
                            County = "Stockholm",
                            Township = "Solna"
                        },
                        new
                        {
                            RegionId = 16,
                            County = "Stockholm",
                            Township = "Lidingö"
                        },
                        new
                        {
                            RegionId = 17,
                            County = "Uppsala",
                            Township = "Håbå"
                        },
                        new
                        {
                            RegionId = 19,
                            County = "Uppsala",
                            Township = "Knivsta"
                        },
                        new
                        {
                            RegionId = 20,
                            County = "Uppsala",
                            Township = "Enköping"
                        },
                        new
                        {
                            RegionId = 21,
                            County = "Uppsala",
                            Township = "Älvkarleby"
                        },
                        new
                        {
                            RegionId = 22,
                            County = "Uppsala",
                            Township = "Tierp"
                        },
                        new
                        {
                            RegionId = 23,
                            County = "Södermanland",
                            Township = "Vingåker"
                        },
                        new
                        {
                            RegionId = 24,
                            County = "Södermanland",
                            Township = "Gnesta"
                        },
                        new
                        {
                            RegionId = 25,
                            County = "Södermanland",
                            Township = "Nyköping"
                        },
                        new
                        {
                            RegionId = 26,
                            County = "Södermanland",
                            Township = "Oxelösund"
                        },
                        new
                        {
                            RegionId = 27,
                            County = "Södermanland",
                            Township = "Flen"
                        },
                        new
                        {
                            RegionId = 28,
                            County = "Södermanland",
                            Township = "Katrineholm"
                        },
                        new
                        {
                            RegionId = 29,
                            County = "Södermanland",
                            Township = "Eskilstuna"
                        },
                        new
                        {
                            RegionId = 30,
                            County = "Södermanland",
                            Township = "Strängnäs"
                        },
                        new
                        {
                            RegionId = 31,
                            County = "Södermanland",
                            Township = "Trosa"
                        },
                        new
                        {
                            RegionId = 32,
                            County = "Östergötland",
                            Township = "Ödeshög"
                        },
                        new
                        {
                            RegionId = 33,
                            County = "Östergötland",
                            Township = "Ydre"
                        },
                        new
                        {
                            RegionId = 34,
                            County = "Östergötland",
                            Township = "Kinda"
                        },
                        new
                        {
                            RegionId = 35,
                            County = "Östergötland",
                            Township = "Boxholm"
                        },
                        new
                        {
                            RegionId = 36,
                            County = "Östergötland",
                            Township = "Åtvidaberg"
                        },
                        new
                        {
                            RegionId = 37,
                            County = "Östergötland",
                            Township = "Finspång"
                        },
                        new
                        {
                            RegionId = 38,
                            County = "Östergötland",
                            Township = "Valdemarsvik"
                        },
                        new
                        {
                            RegionId = 39,
                            County = "Östergötland",
                            Township = "Linköping"
                        },
                        new
                        {
                            RegionId = 41,
                            County = "Östergötland",
                            Township = "Norrköping"
                        },
                        new
                        {
                            RegionId = 42,
                            County = "Östergötland",
                            Township = "Söderköping"
                        },
                        new
                        {
                            RegionId = 43,
                            County = "Östergötland",
                            Township = "Motala"
                        },
                        new
                        {
                            RegionId = 44,
                            County = "Östergötland",
                            Township = "Vadstena"
                        },
                        new
                        {
                            RegionId = 45,
                            County = "Östergötland",
                            Township = "Mjölby"
                        },
                        new
                        {
                            RegionId = 46,
                            County = "Jönköping",
                            Township = "Aneby"
                        },
                        new
                        {
                            RegionId = 47,
                            County = "Jönköping",
                            Township = "Gnosjö"
                        },
                        new
                        {
                            RegionId = 48,
                            County = "Jönköping",
                            Township = "Mullsjö"
                        },
                        new
                        {
                            RegionId = 49,
                            County = "Jönköping",
                            Township = "Habo"
                        },
                        new
                        {
                            RegionId = 51,
                            County = "Jönköping",
                            Township = "Vaggeryd"
                        },
                        new
                        {
                            RegionId = 52,
                            County = "Jönköping",
                            Township = "Jönköping"
                        },
                        new
                        {
                            RegionId = 53,
                            County = "Jönköping",
                            Township = "Nässjö"
                        },
                        new
                        {
                            RegionId = 55,
                            County = "Jönköping",
                            Township = "Sävsjö"
                        },
                        new
                        {
                            RegionId = 56,
                            County = "Jönköping",
                            Township = "Vetlanda"
                        },
                        new
                        {
                            RegionId = 57,
                            County = "Jönköping",
                            Township = "Eksjö"
                        },
                        new
                        {
                            RegionId = 58,
                            County = "Jönköping",
                            Township = "Tranås"
                        },
                        new
                        {
                            RegionId = 59,
                            County = "Kronoberg",
                            Township = "Uppvidinge"
                        },
                        new
                        {
                            RegionId = 60,
                            County = "Kronoberg",
                            Township = "Lessebo"
                        },
                        new
                        {
                            RegionId = 61,
                            County = "Kronoberg",
                            Township = "Tingsryd"
                        },
                        new
                        {
                            RegionId = 62,
                            County = "Kronoberg",
                            Township = "Alvesta"
                        },
                        new
                        {
                            RegionId = 63,
                            County = "Kronoberg",
                            Township = "Älmhult"
                        },
                        new
                        {
                            RegionId = 64,
                            County = "Kronoberg",
                            Township = "Markaryd"
                        },
                        new
                        {
                            RegionId = 65,
                            County = "Kronoberg",
                            Township = "Växsjö"
                        },
                        new
                        {
                            RegionId = 66,
                            County = "Kronoberg",
                            Township = "Ljungby"
                        },
                        new
                        {
                            RegionId = 67,
                            County = "Kalmar",
                            Township = "Högsby"
                        },
                        new
                        {
                            RegionId = 68,
                            County = "Uppsala",
                            Township = "Heby"
                        },
                        new
                        {
                            RegionId = 69,
                            County = "Uppsala",
                            Township = "Uppsala"
                        },
                        new
                        {
                            RegionId = 70,
                            County = "Kalmar",
                            Township = "Mörbylånga"
                        },
                        new
                        {
                            RegionId = 71,
                            County = "Kalmar",
                            Township = "Hultsfred"
                        },
                        new
                        {
                            RegionId = 72,
                            County = "Kalmar",
                            Township = "Mönsterås"
                        },
                        new
                        {
                            RegionId = 73,
                            County = "Kalmar",
                            Township = "Emmaboda"
                        },
                        new
                        {
                            RegionId = 74,
                            County = "Kalmar",
                            Township = "Kalmar"
                        },
                        new
                        {
                            RegionId = 75,
                            County = "Kalmar",
                            Township = "Nybro"
                        },
                        new
                        {
                            RegionId = 76,
                            County = "Kalmar",
                            Township = "Oskarshamn"
                        },
                        new
                        {
                            RegionId = 77,
                            County = "Kalmar",
                            Township = "Västervik"
                        },
                        new
                        {
                            RegionId = 78,
                            County = "Kalmar",
                            Township = "Vimmerby"
                        },
                        new
                        {
                            RegionId = 79,
                            County = "Kalmar",
                            Township = "Borgholm"
                        },
                        new
                        {
                            RegionId = 80,
                            County = "Gotland",
                            Township = "Gotland"
                        },
                        new
                        {
                            RegionId = 81,
                            County = "Blekinge",
                            Township = "Olofström"
                        },
                        new
                        {
                            RegionId = 82,
                            County = "Blekinge",
                            Township = "Ronneby"
                        },
                        new
                        {
                            RegionId = 83,
                            County = "Blekinge",
                            Township = "Karlshamn"
                        },
                        new
                        {
                            RegionId = 84,
                            County = "Blekinge",
                            Township = "Sölvesborg"
                        });
                });

            modelBuilder.Entity("HomeHavenAPI.Models.Residence", b =>
                {
                    b.Property<int>("ResidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResidenceId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BiArea")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<int>("LandArea")
                        .HasColumnType("int");

                    b.Property<int>("LivingArea")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyFee")
                        .HasColumnType("int");

                    b.Property<int>("OperatingCost")
                        .HasColumnType("int");

                    b.Property<string>("PictureListURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ResidenceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidenceRealtorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<int>("StartingPrice")
                        .HasColumnType("int");

                    b.HasKey("ResidenceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidenceRealtorId");

                    b.ToTable("Residences");

                    b.HasData(
                        new
                        {
                            ResidenceId = 1,
                            Address = "Sveavägen 42",
                            BiArea = 20,
                            CategoryId = 1,
                            ConstructionYear = 2004,
                            LandArea = 500,
                            LivingArea = 120,
                            MonthlyFee = 4000,
                            OperatingCost = 50000,
                            PictureListURL = "[\"https://gotenehus.se/app/uploads/2022/09/puff-vassholm-lada-1344x896.jpg\",\"https://cdn.decoist.com/wp-content/uploads/2014/08/Indoor-blossoms-in-a-modern-living-room.jpg\",\"https://homejab.com/wp-content/uploads/2021/11/https-__realtor.homejab.com_wp-content_uploads_2021_10_1906_Santa_Clara_Ave__Alameda__CA_94501__USA-20210131235707.jpg\"]",
                            RealtorId = 5,
                            RegionId = 1,
                            ResidenceDescription = "Modern lägenhet med öppen planlösning och balkong belägen i centrala stan.",
                            RoomCount = 5,
                            StartingPrice = 2000000
                        },
                        new
                        {
                            ResidenceId = 2,
                            Address = "Storgatan 12",
                            BiArea = 30,
                            CategoryId = 2,
                            ConstructionYear = 2000,
                            LandArea = 0,
                            LivingArea = 100,
                            MonthlyFee = 6500,
                            OperatingCost = 24500,
                            PictureListURL = "[\"https://www.brahus.se/upload/house/1031629571.jpg\"]",
                            RealtorId = 4,
                            RegionId = 2,
                            ResidenceDescription = "Charmigt radhus med trädgård och garage i lugnt bostadsområde nära naturen.",
                            RoomCount = 3,
                            StartingPrice = 1250000
                        },
                        new
                        {
                            ResidenceId = 3,
                            Address = "Strandvägen 7",
                            BiArea = 0,
                            CategoryId = 3,
                            ConstructionYear = 2018,
                            LandArea = 1000,
                            LivingArea = 250,
                            MonthlyFee = 4250,
                            OperatingCost = 32400,
                            PictureListURL = "[\"https://hjaltevadshus.se/app/uploads/2022/10/nyckelfardiga-vitsippan.jpg\"]",
                            RealtorId = 3,
                            RegionId = 3,
                            ResidenceDescription = "Funkisvilla med pool och havsutsikt på exklusiv adress vid kusten.",
                            RoomCount = 6,
                            StartingPrice = 3000000
                        },
                        new
                        {
                            ResidenceId = 4,
                            Address = "Norra Vallgatan 14",
                            BiArea = 15,
                            CategoryId = 4,
                            ConstructionYear = 2009,
                            LandArea = 625,
                            LivingArea = 130,
                            MonthlyFee = 7000,
                            OperatingCost = 31500,
                            PictureListURL = "[\"https://www.osloguiden.se/wp-content/uploads/2015/04/Pilestredet.jpg\"]",
                            RealtorId = 3,
                            RegionId = 2,
                            ResidenceDescription = "Gammal gård renoverad till lyxigt boende med generösa sällskapsytor och stor trädgård.",
                            RoomCount = 4,
                            StartingPrice = 2230000
                        },
                        new
                        {
                            ResidenceId = 5,
                            Address = "Östra Hamngatan 3",
                            BiArea = 50,
                            CategoryId = 5,
                            ConstructionYear = 1972,
                            LandArea = 200,
                            LivingArea = 120,
                            MonthlyFee = 3750,
                            OperatingCost = 20500,
                            PictureListURL = "[\"https://www.ekonomifokus.se/wp-content/uploads/2019/01/Vad-ingar-vid-kop-och-salj-av-fastighet-och-hus-e1547480095379.jpg\"]",
                            RealtorId = 1,
                            RegionId = 5,
                            ResidenceDescription = "Lägenhet i nybyggd bostadsrättsförening med gemensam takterrass och närhet till shopping och kommunikationer.",
                            RoomCount = 5,
                            StartingPrice = 1400000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "57059a7e-22f6-4d89-9442-d75890254abf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HomeHavenAPI.Models.Realtor", b =>
                {
                    b.HasOne("HomeHavenAPI.Models.RealtorFirm", "MyRealtorFirm")
                        .WithMany()
                        .HasForeignKey("RealtorFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyRealtorFirm");
                });

            modelBuilder.Entity("HomeHavenAPI.Models.Residence", b =>
                {
                    b.HasOne("HomeHavenAPI.Models.Category", "ResidenceCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeHavenAPI.Models.Region", "ResidenceRegion")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeHavenAPI.Models.Realtor", "ResidenceRealtor")
                        .WithMany()
                        .HasForeignKey("ResidenceRealtorId");

                    b.Navigation("ResidenceCategory");

                    b.Navigation("ResidenceRealtor");

                    b.Navigation("ResidenceRegion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeHavenAPI.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeHavenAPI.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeHavenAPI.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeHavenAPI.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
