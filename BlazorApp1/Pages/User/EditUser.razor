@page "/edituser"
@inject IRealtorService realtorService
@inject ILocalStorageService localstorage
@inject NavigationManager navManager
<div class="card formbox">
    <div class="card-body">
        <h4 class="card-title">Redigera Profil</h4>
	<EditForm Model="EditRealtorModel" OnSubmit="Submit">
		<div class="form-group">
			<label for="FirstName">Förnamn</label>
			<InputText id="FirstName" @bind-Value="@EditRealtorModel.FirstName" class="form-control" />
			<ValidationMessage For="@(() => EditRealtorModel.FirstName)" />
		</div>

		<div class="form-group">
			<label for="LastName">Efternamn</label>
			<InputText id="LastName" @bind-Value="@EditRealtorModel.LastName" class="form-control" />
			<ValidationMessage For="@(() => EditRealtorModel.LastName)" />
		</div>

		<div class="form-group">
			<label for="Email">Email</label>
			<InputText id="Email" @bind-Value="@EditRealtorModel.Email" class="form-control" />
			<ValidationMessage For="@(() => EditRealtorModel.Email)" />
		</div>

		<div class="form-group">
			<label for="PhoneNumber">Telefonnummer</label>
			<InputText id="PhoneNumber" @bind-Value="@EditRealtorModel.PhoneNumber" class="form-control" />
			<ValidationMessage For="@(() => EditRealtorModel.PhoneNumber)" />
		</div>

		<div class="form-group">
			<label for="ProfilePictureURL">Profilbild</label>
			<InputText id="ProfilePictureURL" @bind-Value="@EditRealtorModel.ProfilePictureURL" class="form-control" />
			<ValidationMessage For="@(() => EditRealtorModel.ProfilePictureURL)" />
		</div>

			<button type="submit" class="btn btn-light btn-outline-dark mt-2">Spara</button>
	</EditForm>
	</div>
</div>



@code {
	//Author Jakob
	public UserJwt User { get; set; } = new UserJwt();
	[Parameter]
	public Realtor EditRealtorModel { get; set; } = new Realtor();

	protected async override Task OnInitializedAsync()
	{
		var token = await localstorage.GetItemAsync<string>("Token");
		if (token != null)
		{
			JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();
			JwtSecurityToken jwt = handler.ReadJwtToken(token);

			var jsonPayload = JsonSerializer.Serialize(jwt.Payload);
			User = JsonSerializer.Deserialize<UserJwt>(jsonPayload);
		}
		EditRealtorModel = await realtorService.GetAsync(User.Id);
	}
	public void Submit()
	{
		realtorService.UpdateAsync(EditRealtorModel, User.Id);
		navManager.NavigateTo("/");
	}
}
