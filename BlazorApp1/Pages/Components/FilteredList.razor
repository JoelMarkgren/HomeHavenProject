@inject IResidenceService residenceService
@inject IRegionService RegionService

<div class="btndiv">
	<button type="button" class="btn btn-secondary btn-lg searchbtn" @onclick="PassesFilters">Sök</button>
</div>



<ResidenceList DisplayResidences="DisplayResidences" />
<br />

@code {
	//Author Joel,Jakob
	[Parameter]
	public List<Category> Categories { get; set; } = new List<Category>();
	[Parameter]
	public int MinPrice { get; set; }
	[Parameter]
	public int MaxPrice { get; set; }
	[Parameter]
	public int MinRoomCount { get; set; }
	[Parameter]
	public int MaxRoomCount { get; set; }
	public IEnumerable<Residence> AllResidences { get; set; } = new List<Residence>();

	public List<Residence> DisplayResidences { get; set; } = new List<Residence>();
	[Parameter]
	public Region SelectedRegion { get; set; }

	protected override async Task OnInitializedAsync()
	{
		AllResidences = await residenceService.GetAllAsync();
	}
	private void PassesFilters()
	{
		DisplayResidences.Clear();
		foreach (var resi in AllResidences)
		{
			if (SelectedRegion == null || resi.ResidenceRegion.Township == SelectedRegion.Township)
			{
				if (MinRoomCount <= resi.RoomCount && MaxRoomCount >= resi.RoomCount || MinRoomCount == 0 && MaxRoomCount == 0 || MinRoomCount <= resi.RoomCount && MaxRoomCount == 0)
				{
					if (resi.StartingPrice >= MinPrice && resi.StartingPrice <= MaxPrice)
					{
						if (Categories.Any() == true)
						{
							foreach (var cat in Categories)
							{
								if (cat.CategoryId == resi.ResidenceCategory.CategoryId)
								{
									DisplayResidences.Add(resi);
								}
							}
						}
						else
						{
							DisplayResidences.Add(resi);
						}
					}
				}
			}
		}
	}
}
