@inject IResidenceService residenceService
@inject IRegionService RegionService
<button @onclick="PassesFilters">Sök</button>
<ResidenceList DisplayResidences="DisplayResidences" />
<br />

@code {
	[Parameter]
	public List<Category> Categories { get; set; } = new List<Category>();
	[Parameter]
	public int MinPrice { get; set; }
	[Parameter]
	public int MaxPrice { get; set; }
	[Parameter]
	public int MinRoomCount { get; set; }
	[Parameter]
	public int MaxRoomCount { get; set; }
	public IEnumerable<ResidenceDto> AllResidences { get; set; } = new List<ResidenceDto>();

	public List<ResidenceDto> DisplayResidences { get; set; } = new List<ResidenceDto>();
	[Parameter]
	public Region SelectedRegion { get; set; }

	protected override async Task OnInitializedAsync()
	{
		AllResidences = await residenceService.GetAllAsync(); 
	}
	private void PassesFilters()
	{
		DisplayResidences.Clear();
		foreach (var resi in AllResidences)
		{
			if (MinRoomCount <= resi.RoomCount && MaxRoomCount >= resi.RoomCount || MinRoomCount == 0 && MaxRoomCount == 0)
			{
				if (resi.StartingPrice >= MinPrice && resi.StartingPrice <= MaxPrice)
				{
					if (Categories.Any() == true)
					{
						foreach (var cat in Categories)
						{
							if (cat.CategoryId == resi.CategoryId)
							{
								DisplayResidences.Add(resi);
							}
						}
					}
					else
					{
						DisplayResidences.Add(resi);
					}
				}
			}
		}

	}
}
