@inject IRealtorFirmService realtorFirmService
@inject IFirmRequestService firmRequestService
@inject IRealtorService realtorService
@inject NavigationManager NavigationManager

<h2>Mottagna:</h2>
@if (MyInvites.Count() == 0)
{
	<h4 class="mb-3">Inga inbjudningar</h4>
}
else
{
	<div>
		@foreach (var invite in MyInvites)
		{
			<div>
				<h4>
					@invite.FromEmail, @invite.RealtorFirmName
					<button @onclick="(e=> AcceptInvite(invite))" type="button" class="btn btn-success ">Acceptera</button>
					<button @onclick="(e=> DeleteInvite(invite))" type="button" class="btn btn-danger">X</button>
				</h4>
			</div>
		}
	</div>



}

@code {
	//Author Jakob
	[Parameter]
	public List<FirmRequest> MyInvites { get; set; }
	[Parameter]
	public string MyId { get; set; }

	public List<RealtorFirm> RealtorFirms { get; set; } = new List<RealtorFirm>();

	protected async override Task OnParametersSetAsync()
	{
		foreach (var invite in MyInvites)
		{
			var tempFirm = await realtorFirmService.GetAsync(invite.RealtorFirmId);
			RealtorFirms.Add(tempFirm);
			invite.RealtorFirmName = tempFirm.FirmName;
		}
	}

	public async void AcceptInvite(FirmRequest Request)
	{
		Realtor MyRealtor = await realtorService.GetAsync(MyId);
		MyRealtor.RealtorFirmId = Request.RealtorFirmId;
		await realtorService.UpdateAsync(MyRealtor, MyId);
		DeleteInvite(Request);
	}
	public void DeleteInvite(FirmRequest Request)
	{
		MyInvites.Remove(Request);
		firmRequestService.DeleteAsync(Request.FirmRequestId);
		StateHasChanged();
	}



}
