@page "/"

@inject IResidenceService ResidenceService
@inject IRealtorFirmService RealtorFirmService
@inject ICategoryService categoryService
@inject IRegionService RegionService
<style>
	.filter-box {
		border: solid 1px gray;
		border-radius: 10px;
		width: 600px;
		margin: auto;
		box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
	}

	.box{
		margin:10px;
		padding: 10px;
		border-radius: 10px;
	}
	.regiondrop{
		
	}

	.cate-box{
		border: solid 1px gray;
		width: 170px;
		
	}
	.room-box{
		border: solid 1px gray;
		width: 185px;
	}

	.price-box{
		border: solid 1px gray;
	}
	.stitle {
		text-align: center;
		font-weight: bold;
		margin-top: 10px;
	}
	.boxtitle{
		text-align: center;
		text-decoration: underline;
		font-size: 20px;
	}

	.maxlabel{
		margin-left: 10px;
	}
	.toprowfilter{
		display:flex;
		justify-content: space-evenly;
	}
	

</style>

<div class="filter-box">
	<h2 class="stitle">SÖK BOSTAD</h2><hr />
	<div class="toprowfilter">
		<div>
			<div class="regiondrop box">
				@if (RegionList == null)
				{
					<h2>loading...</h2>
				}
				else
				{
					<RegionDropDownList AllRegions="RegionList.OrderBy(r => r.Township).ToList()" Region="GetRegion" />
				}
			</div>
			<div class="room-box box">
				<h4 class="boxtitle">Antal rum</h4>
				<RoomCount MinCount="GetMinRoomCount" MaxCount="GetMaxRoomCount" />
			</div>

		</div>
		

		<div class="cate-box box">
			@if (CategoryList == null)
			{
				<h2>loading...</h2>
			}
			else
			{
				@foreach (var category in CategoryList)
				{
					<ResidenceCheckbox Name="@category.CategoryName" Id="category.CategoryId" OnCategorySelection="HandleCheckBox" />
				}
			}
		</div>
		
	</div>
	
	<div class="price-box box">
		<MinMaxPrice OnSelectedMinPrice="GetMinPrice" OnSelectedMaxPrice="GetMaxPrice" />
	</div>
	
	

	
</div>

<FilteredList MaxRoomCount="MaxCount" MinRoomCount="MinCount" MinPrice="MinPriceValue" MaxPrice="MaxPriceValue" Categories="SelectedCategoryList" SelectedRegion="SelectedRegion" />





@code {
	public IEnumerable<RealtorFirm> Firms { get; set; } = new List<RealtorFirm>();
	public IEnumerable<Category> CategoryList { get; set; } = new List<Category>();
	public List<Category> SelectedCategoryList { get; set; } = new List<Category>();
	private List<ResidenceDto> Residences { get; set; } = new List<ResidenceDto>();
	public IEnumerable<ResidenceDto> FilteredResidences { get; set; } = new List<ResidenceDto>();
	public IEnumerable<Region> RegionList { get; set; } = new List<Region>();
	public Region SelectedRegion { get; set; }

	public int MinCount { get; set; }
	public int MaxCount { get; set; }

	int MinPriceValue { get; set; } = 300000;
	int MaxPriceValue { get; set; } = 20000000;

	protected override async Task OnInitializedAsync()
	{
		Firms = await RealtorFirmService.GetAllAsync();
		CategoryList = await categoryService.GetAllAsync();
		FilteredResidences = await ResidenceService.GetAllAsync();
		RegionList = await RegionService.GetAllAsync();
	}

	private void GetMinRoomCount(int min)
	{
		MinCount = min;

	}
	private void GetMaxRoomCount(int max)
	{
		MaxCount = max;

	}

	private void HandleCheckBox(int id)
	{
		var category = CategoryList.FirstOrDefault(c => c.CategoryId == id);

		if (!SelectedCategoryList.Contains(category))
		{
			SelectedCategoryList.Add(category);
		}
		else
		{
			SelectedCategoryList.Remove(category);
		}
	}
	private void GetRegion(Region region)
	{
		SelectedRegion = region;
	}
	private void GetMinPrice(int min)
	{
		MinPriceValue = min;
	}
	private void GetMaxPrice(int max)
	{
		MaxPriceValue = max;
	}

}
