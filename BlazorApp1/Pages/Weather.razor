@page "/"

@inject IResidenceService ResidenceService
@inject IRealtorFirmService RealtorFirmService
@inject ICategoryService categoryService


<div class="Category-List">
    @if (CategoryList == null)
    {
        <h2>loading...</h2>
    }
    else
    {
        @foreach (var category in CategoryList)
        {
            <ResidenceCheckbox Name="@category.CategoryName"  Id="category.CategoryId" OnCategorySelection="HandleCheckBox" />
        }
    }
</div>


@* --Min och Maxpris-Sliders-- *@

 <div class="slider-wrapper">
    <div class="MinValContainer">
        <label class="MinValLabel">Minimum pris:</label>
        <input type="range" min="300000" max="20000000" @bind="MinPriceValue" />
        <output>@MinPriceValue</output>
    </div>
    <div class="MaxValContainer">
        <label class="MaxValLabel">Maximum pris:</label>
        <input type="range" min="300000" max="20000000" @bind="MaxPriceValue" />
        <output>@MaxPriceValue</output>
    </div>
</div>
<div>
    <RoomCount MinCount="GetMinRoomCount" MaxCount="GetMaxRoomCount" />
  
</div>
<div>
    <FilteredList MaxRoomCount="MaxCount" MinRoomCount= "MinCount" MinPrice="MinPriceValue" MaxPrice="MaxPriceValue" Categories="SelectedCategoryList" />
</div>



@code {
    public IEnumerable<RealtorFirm> Firms { get; set; } = new List<RealtorFirm>();
    public IEnumerable<Category> CategoryList { get; set; } = new List<Category>();
    public List<Category> SelectedCategoryList { get; set; } = new List<Category>();
    private List<ResidenceDto> Residences { get; set; } = new List<ResidenceDto>();
    public IEnumerable<ResidenceDto> FilteredResidences { get; set; } = new List<ResidenceDto>();
    public int MinCount { get; set; }
    public int MaxCount { get; set; }

    int MinPriceValue { get; set; } = 300000;
    int MaxPriceValue { get; set; } = 20000000;

    protected override async Task OnInitializedAsync()
    {
        Firms = await RealtorFirmService.GetAllAsync();
        CategoryList = await categoryService.GetAllAsync();
        FilteredResidences = await ResidenceService.GetAllAsync();
    }

    private void GetMinRoomCount(int min)
    {
        MinCount = min;

    }
    private void GetMaxRoomCount(int max)
    {
        MaxCount = max;

    }

    private void HandleCheckBox(int id)
    {
        var category = CategoryList.FirstOrDefault(c => c.CategoryId == id);

        if (!SelectedCategoryList.Contains(category))
        {
            SelectedCategoryList.Add(category);
        }
        else
        {
            SelectedCategoryList.Remove(category);
        }
    }
}
